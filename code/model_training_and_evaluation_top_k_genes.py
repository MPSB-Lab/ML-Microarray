# -*- coding: utf-8 -*-
"""model_training_and_evaluation_top_k_genes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I3hfwSpPMAfcWBLOB0ZUZGK3ozQX33wX
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import LeaveOneOut
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.pipeline import Pipeline
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    matthews_corrcoef, roc_auc_score, confusion_matrix
)
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.preprocessing import label_binarize

from google.colab import drive
drive.mount('/content/drive')

file_path = "/content/drive/MyDrive/Model Training Dataset.xlsx"
df = pd.read_excel(file_path,sheet_name="Antisense")

gene_names = df.iloc[:, 0]
expr_data = df.iloc[:, 1:]

# Identify control and infected samples
control_cols = [col for col in expr_data.columns if "UNC" in col]
infected_cols = [col for col in expr_data.columns if "UNC" not in col]

X_df = expr_data[control_cols + infected_cols].T
X_df.columns = gene_names
X_vals = X_df.values

y = np.array([0] * len(control_cols) + [1] * len(infected_cols))  # 0 = control, 1 = infected

print(f"{X_vals.shape[0]} samples, {X_vals.shape[1]} genes")
print(f"{len(control_cols)} control, {len(infected_cols)} infected")

models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'SVM': SVC(kernel='linear', probability=True, random_state=42),
    'Logistic Regression': LogisticRegression(max_iter=1000, random_state=42),
    'XGBoost': XGBClassifier(n_estimators=100,max_depth=2,learning_rate=0.05,subsample=0.8,colsample_bytree=0.8,reg_alpha=0.1,reg_lambda=1,eval_metric='logloss',random_state=42)
}

k_values = [20, 30, 40, 50, 60, 77] #for antisense
all_results = []

# cross validation
loo = LeaveOneOut()

for k in k_values:
    print(f"\n Evaluating Top {k} genes with LOOCV")
    for model_name, model in models.items():
        y_true = []
        y_pred = []
        y_prob = []

        for train_idx, test_idx in loo.split(X_vals):
            X_train, X_test = X_vals[train_idx], X_vals[test_idx]
            y_train, y_test = y[train_idx], y[test_idx]

            pipeline = Pipeline([
                ('select', SelectKBest(score_func=f_classif, k=k)),
                ('clf', model)
            ])

            pipeline.fit(X_train, y_train)
            y_pred.append(pipeline.predict(X_test)[0])
            y_true.append(y_test[0])

            if hasattr(pipeline.named_steps['clf'], "predict_proba"):
                prob = pipeline.predict_proba(X_test)[0][1]
            else:
                prob = pipeline.decision_function(X_test)[0] if hasattr(pipeline.named_steps['clf'], "decision_function") else 0.5
            y_prob.append(prob)

        # compute metrics
        acc = accuracy_score(y_true, y_pred)
        prec = precision_score(y_true, y_pred, zero_division=0)
        rec = recall_score(y_true, y_pred)
        f1 = f1_score(y_true, y_pred)
        mcc = matthews_corrcoef(y_true, y_pred)
        try:
            auc = roc_auc_score(y_true, y_prob)
        except:
            auc = np.nan

        tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
        specificity = tn / (tn + fp) if (tn + fp) > 0 else 0

        all_results.append({
            "Top_k": k,
            "Model": model_name,
            "Accuracy": round(acc, 3),
            "Precision": round(prec, 3),
            "Sensitivity": round(rec, 3),
            "Specificity": round(specificity, 3),
            "F1 Score": round(f1, 3),
            "MCC": round(mcc, 3),
            "AUC": round(auc, 3)
        })

        print(f"{model_name} â€” ACC: {acc:.3f}, F1: {f1:.3f}, AUC: {auc:.3f}, MCC: {mcc:.3f}")

results_df = pd.DataFrame(all_results)
path = "/content/drive/MyDrive/antisense_loocv_detailed_metrics.csv"
results_df.to_csv(path, index=False)
print(f"\n Results saved to {path}")