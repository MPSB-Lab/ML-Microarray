# -*- coding: utf-8 -*-
"""shap_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1izrBJotDGFIo8rCWuU4kYsmqIV0-ux4f
"""

import pandas as pd
import numpy as np
import shap
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report

from google.colab import drive
drive.mount('/content/drive')

def load_and_preprocess_data(file_path):
    df = pd.read_excel(file_path,sheet_name="AS_70", index_col=0)
    labels = np.where(df.columns.str.contains('UNC'), 0, 1)
    X = df.T
    y = labels
    gene_names = df.index.tolist()
    return X, y, gene_names

def train_models(X_train, X_test, y_train, y_test):
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Random Forest
    rf = RandomForestClassifier(n_estimators=100, random_state=42)
    rf.fit(X_train, y_train)
    print("Random Forest performance:")
    print(classification_report(y_test, rf.predict(X_test)))

    # Logistic Regression
    lr = LogisticRegression(max_iter=1000, random_state=42)
    lr.fit(X_train_scaled, y_train)
    print("\nLogistic Regression performance:")
    print(classification_report(y_test, lr.predict(X_test_scaled)))

    return rf, lr, scaler

def generate_shap_analysis(model, X, feature_names, model_name, is_tree_model=False):
    # Calculate SHAP values
    if is_tree_model:
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(X)
        if isinstance(shap_values, list):
            shap_values = np.array(shap_values)[1]
        elif len(shap_values.shape) == 3:
            shap_values = shap_values[:, :, 1]
    else:
        explainer = shap.Explainer(model, X)
        shap_values = explainer(X).values

    if len(shap_values.shape) > 2:
        shap_values = np.sum(shap_values, axis=-1)

    # Create CSV with all SHAP scores
    shap_df = pd.DataFrame({
        'Gene': feature_names,
        'Mean_abs_SHAP': np.abs(shap_values).mean(axis=0),
        'Mean_SHAP': shap_values.mean(axis=0)
    }).sort_values('Mean_abs_SHAP', ascending=False)

    csv_filename = f"/content/drive/MyDrive/SAenseshap_scores_{model_name.lower().replace(' ', '_')}.csv"
    shap_df.to_csv(csv_filename, index=False)
    print(f"Saved SHAP scores to {csv_filename}")

    # Create visualizations
    plt.figure(figsize=(10, 12))
    shap.summary_plot(shap_values, X, feature_names=feature_names, show=False)
    plt.title(f"SHAP Summary - {model_name}", fontsize=14)
    plt.tight_layout()
    plt.savefig(f"shap_{model_name.lower().replace(' ', '_')}_summary.png", dpi=300, bbox_inches='tight')
    plt.close()

    create_shap_barplot(shap_values, feature_names, model_name)

    return shap_df

def create_shap_barplot(shap_values, feature_names, model_name, top_n=20):
    mean_shap = pd.DataFrame(shap_values, columns=feature_names).abs().mean()
    mean_shap = mean_shap.sort_values(ascending=False)

    if len(mean_shap) > top_n:
        top_features = mean_shap[:top_n]
        other_value = mean_shap[top_n:].sum()
        plot_data = pd.concat([top_features, pd.Series(other_value, index=['Other genes'])])
    else:
        plot_data = mean_shap

    plt.figure(figsize=(10, 12))
    plot_data.plot.barh(color='steelblue')
    plt.title(f'Mean |SHAP| Values - {model_name}', fontsize=14, pad=20)
    plt.xlabel('Mean absolute SHAP value', fontsize=12)
    plt.ylabel('Gene Names', fontsize=12)
    plt.grid(axis='x', linestyle='--', alpha=0.7)

    filename = f"shap_{model_name.lower().replace(' ', '_')}_barplot.png"
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"Saved {filename}")


if __name__ == "__main__":
    file_path = "/content/drive/MyDrive/SCREENED_DATA.xlsx"
    X, y, gene_names = load_and_preprocess_data(file_path)

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=42, stratify=y
    )

    rf_model, lr_model, scaler = train_models(X_train, X_test, y_train, y_test)

    X_test_scaled = scaler.transform(X_test)

    print("\nGenerating SHAP plots...")
    generate_shap_analysis(rf_model, X_test, gene_names, "Random Forest", is_tree_model=True)
    generate_shap_analysis(lr_model, X_test_scaled, gene_names, "Logistic Regression")

    print("\nSHAP analysis complete! Check your directory for the output PNG files.")